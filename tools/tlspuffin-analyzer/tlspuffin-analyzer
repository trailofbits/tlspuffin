#!/bin/env python
import argparse
from tlspuffin_analyzer import *

PATH = "/local-homes/lhirschi/tlspuffin"
HOST = "pesto-calc.loria.fr"
USER = "lhirschi"

def main():
    parser = argparse.ArgumentParser(description='Plots statistics')
    parser.add_argument('experiment', type=str,
                        help='Name of the experiment')
    parser.add_argument('--worker_id', type=int,
                        default=1,
                        help='Filter log entries from this worker id (deprecated, before was set to 0) but it seems that libAFL changed its logs.')
    parser.add_argument('--save', type=str,
                        help='Save the output as a PDF at the given path.')
    parser.add_argument('--fewer', dest='fewer', action='store_true',
                        help='Only displays most important tables.')
    args = parser.parse_args()


    stats_path = "%s/stats.json" % args.experiment
    print("Loading file \"%s\"." % stats_path)
    id_0_stats = load_json_slurpy(stats_path, args.worker_id)
    log_path = "%s/tlspuffin-log.json" % args.experiment
    print("Loading file \"%s\"." % log_path)
    log = load_json_slurpy_log(log_path)

    print("Files loaded.")

    if id_0_stats == []:
        print("Experiment log JSON is empty.")
        exit(0)

    # print(log[0])

    # keys_stats = get_keys(id_0_stats)
    # print("Available keys (stats): %s" % keys_stats)

    start_date_log = log[0]["time"]
    start_date = get_start_date(id_0_stats)
    print("Stats started at %s while log started at %s." % (start_date, start_date_log))

    # keys_log = get_keys(log)
    # print("Available keys (log): %s" % keys_log)

    for group in group_by_id(id_0_stats):
        print("Plotting group=\"%s\"" % group)
        fig = plot_client_stats(start_date, start_date_log, group, log, fewer=args.fewer)

    if args.save:
        # print(fig.canvas.get_supported_filetypes())
        # fig.savefig(args.save, transparent=False, dpi=200, bbox_inches="tight")
        print("Saving files %s and %s..." % (args.save + ".svg", args.save + ".pdf"))
        fig.savefig(args.save + ".svg", format="svg", dpi=400, transparent=False, bbox_inches="tight")
        fig.savefig(args.save + ".pdf", format="pdf", dpi=400, transparent=False, bbox_inches="tight")
    else:
        print("Displaying the plot...")
        plt.show()

main()
